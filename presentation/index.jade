mixin content
  section.title.inverse(data-background='#27ae61')
    h1 Facetrain Experiments
    h2 Paul Nechifor
    .sub-info
      p.left
        a(href='http://www.infoiasi.ro/bin/Main/') Faculty of Computer Science
      p.right 22 April 2014
  section(data-background='#EAECCB')
    h2 Overview
    ul
      li Description of Parts
      li <p>Experiments</p>
        ol
          li Initial Example
          li Sunglasses Example
          li Effects of Splitting
          li Number of Instances
          li Multiple Output Units
          li Visualizing Hidden Units
  section
    h2 C Source Code
    ul
      li Written in 1994.
      li <p>What it does:</p>
        ul
          li Reads the lists.
          li Computes the target value for every image.
          li Trains the network. And others...
      li I modified it so that everything is read on input.
  section
    h2 CoffeeScript Wrapper
    ul
      li It's a Node.js package.
      li Written so that experiments can be more flexible.
      li Uses the <code>facetrain</code> binaries.
      li Records output from the binaries for processing.
      li Splits the lists dynamically.
      li Assigns target values.
  section
    h2 Plots
    ul
      li Generated with Matplotlib from Python.
      li Example:
    pre
      code.python.big-pre.
        from pylab import *
        import sys, json
        data = json.loads(sys.stdin.read())
        subplot(211)
        plot(data['epoch'], data['trainperf'], 'r', label='training')
        plot(data['epoch'], data['t1perf'], 'g', label='validation')
        plot(data['epoch'], data['t2perf'], 'b', label='test')
        ylabel('percent correct')
        legend(bbox_to_anchor=(0.0, 1.02, 1.0, 0.102), loc=3,
          ncol=3, mode="expand", borderaxespad=0.0, frameon=False)
        ...
  section(data-background='#EAECCB')
    h2 1. Initial Example
    ul
      li only straight face orientation
      li only the 32×30 images (960 input units)
      li 4 hidden units
      li 1 output unit
      li 80 iterations (called epochs)
      li goal is to recognize the person with the id <code>glickman</code>
  section
    p Rewritten in CoffeeScript as:
    pre
      code.coffeescript.big-pre.
        facetrain = new Facetrain
        facetrain.options
        .filter (image) -> image.head is 'straight'
        .scale 4
        .hidden 4
        .output 1
        .size [32, 30]
        .split [0.444, 0.333, 0.223]
        .epochs 80
        .targetFunc (image) ->
           if image.person is 'glickman' then [0.9] else [0.1]
        facetrain.train (err, network) ->
          throw err if err
          plot = __dirname + '/../plots/perf-and-error.py'
          util.pythonPlot plot, util.putImage(__filename, 'svg'),
            network.performance, (err) -> throw err if err
    p Runs in 1 second (after disk caching).
  section
    p And generates the plot:
    img(src='images/glickman-straight.svg', alt='')
    p All sets are corectly classified in about 10 iterations.
  section(data-background='#EAECCB')
    h2 2. Sunglasses Example
    ul
      li Same as before, but the goal is to recognize if the person is wearing
        | sunglasses.
      li The results are poorer.
  section
    img(src='images/sunglasses-straight.svg', alt='').plot
  section(data-background='#EAECCB')
    h2 3. Effects of Splitting
    ul
      li Normally, the images are randomly split in 3 sets.
      li In the original <code>facetrain</code> the spliting is static.
      li Does the splitting matter much?
      li The previous example is now run 100 times, plotting only the testing
        | set.
      li Runs in 58 seconds.
      li Results: with the few instances provided, the splitting matters.
  section
    img(src='images/sunglasses-straight-multiple-trainings.svg', alt='').plot
  section
    h2 Happy Faces
    ul
      li Similar example, but classifying happy faces.
      li After multiple iterations the error grows.
  section
    img(src='images/happy-straight-multiple-trainings.svg', alt='').plot
  section(data-background='#EAECCB')
    h2 4. Number of Instances
    ul
      li Visualising the effects of fewer training instances.
      li Running the sunglasses example.
      li Results: as expected.
  section
    img(src='images/sunglasses-fewer-instances.svg', alt='').plot
  section(data-background='#EAECCB')
    h2 5. Multiple Output Units
    ul
      li Recreating the book example.
      li 3 hidden units.
      li 4 output units (up, right, straight, left).
      li Stopping after every epoch to grab the hidden units representation.
  section
    p The code used:
    pre
      code.coffeescript.big-pre.
        facetrain = new Facetrain
        facetrain.options
        .hidden 3
        .output 4
        .targetFunc (image) -> [
          if image.head is 'up' then 0.9 else 0.1
          if image.head is 'right' then 0.9 else 0.1
          if image.head is 'straight' then 0.9 else 0.1
          if image.head is 'left' then 0.9 else 0.1
        ]
        .interrupt true
        ...
  section
    img(src='images/head.svg', alt='').plot
  section
    h2 Example Classifications
    - for (var i = 0; i < 4; i++)
      img(src="images/head-classif-#{i}.gif", alt='').img-classif
  section
    p Correct classifications:
    - for (var i = 0; i < 8; i++)
      img(src="images/head-classif-good-#{i}.png", alt='').img-classif-small
  section
    p Correct classifications:
    - for (var i = 8; i < 16; i++)
      img(src="images/head-classif-good-#{i}.png", alt='').img-classif-small
  section
    p Incorrect classifications:
    - for (var i = 0; i < 8; i++)
      img(src="images/head-classif-bad-#{i}.png", alt='').img-classif-small
  section
    h2 Own Face Classification
    ul
      li The results aren't so good.
      li It's possible the different setup affects them.
    - for (var i = 0; i < 4; i++)
      img(src="images/own-classif-#{i}.png", alt='').img-classif
  section(data-background='#EAECCB')
    h2 6. Visualizing Hidden Units
    ul
      li Trying to see if the weights have recognizable patterns.
      li Classifying happy faces and stopping after every epoch to grab images
        | of the weights.
      li Result: no recognizable patterns emerge.
  section
    p First epoch:
    img(src='images/intermediate-faces-hidden-first.png', alt='')
    p Last epoch:
    img(src='images/intermediate-faces-hidden-last.png', alt='')
    p Animation for all (subltle changes):
    img(src='images/intermediate-faces-hidden-animation.gif', alt='')
  section
    ul
      li Does varying the number of hidden units produce linked results?
      li Running head orientation classification example.
      li The images should be similar to those in the “Machine Learning” book,
        | but aren't.
      li Result: again, no recognizable patterns emerge.
  section
    p 3 hidden:
    img(src='images/head-orientation-3-hidden-last.png', alt='')
    p 4 hidden:
    img(src='images/head-orientation-4-hidden-last.png', alt='')
    p 5 hidden:
    img(src='images/head-orientation-5-hidden-last.png', alt='')
  section(data-background='#EAECCB')
    h2 References
    ul
      li Book: “Machine Learning” by Tom Mitchell
      li Source code:
        = ' '
        a(href='http://www.cs.cmu.edu/~awm/15781/2003/hw3/face/')
          code http://www.cs.cmu.edu/~awm<br/>/15781/2003/hw3/face/

    h2 My Works
    ul
      li Repo for project:
        = ' '
        a(href='https://github.com/paul-nechifor/facetrain')
          code https://github.com<br/>/paul-nechifor/facetrain
  section.title.inverse(data-background='#27ae61')
    h1 The End
    h2 Questions?

doctype html
html(lang='en')
  head
    meta(charset='utf-8')
    title Facetrain Experiments
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')
    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')
    link(rel='stylesheet', href='reveal/reveal.min.css')
    link(rel='stylesheet', href='style.css')
  body
    .reveal
      .slides
        +content()
    script(src='reveal/head.min.js')
    script(src='reveal/reveal.min.js')
    script(src='js/highlight.js')
    script(src='script.js')
